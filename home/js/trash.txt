calculateDerivedVar: function(metric, yvar){
                            //////console.log("Calculating "+ metric); 
                            var self = this; 
                            var derived = []; 
                            for(var i=0; i< self.data.length; i++){
                                var rec = self.data[i]; 
                                
                                if(yvar === "death"){
                                    if(rec["unitdisstatus"] === "1")
                                        self.data[i][yvar] = 1;
                                    else
                                        self.data[i][yvar] = 0;
                                }

                                
                                if(metric === "48h Readmission"){
                                    // data loop calculations
                                    if(!self.ehr[self.data[i]["1.03 NHS number"]]){
                                        
                                        self.ehr[self.data[i]["1.03 NHS number"]] = {}; 
                                        self.ehr[self.data[i]["1.03 NHS number"]]["admissionsT"] = [];
                                        self.ehr[self.data[i]["1.03 NHS number"]]["dischargesT"] = [];
                                    }
                                    
                                    self.ehr[self.data[i]["1.03 NHS number"]]["admissionsT"].push(self.data[i]["3.06 Date/time arrival at hospital"]);
                                    self.ehr[self.data[i]["1.03 NHS number"]]["dischargesT"].push(self.data[i]["4.01 Date of discharge"]);
                                    
                                    /*var discharge_date = new Date(self.data[i][vars[0]]);
                                    var readmission_date = new Date(self.data[i][vars[1]]);
                                    
                                    var diff = Math.round((readmission_date.getTime() - discharge_date.getTime())/one_day); 
                                    //////console.log(diff); 
                                    self.data[i][metric] = ((diff > 0) && (diff <= 2))? 1: 0; */
                                }
                                else if(metric === "Length of Stay"){
                                    var adm = self.data[i]["3.06 Date/time arrival at hospital"];
                                    var disc = self.data[i]["4.01 Date of discharge"];
                                    var one_day = 1000*60*60*24; 
                                    self.data[i][metric] = (self.stringToDate(disc).getTime() - self.stringToDate(adm).getTime())/one_day; 
                                }

                            }        
                            ////////console.log(self.ehr); 
                            if(metric === "48h Readmission"){
                                for(var i=0; i< self.data.length; i++){

                                var patientEHR = self.ehr[self.data[i]["1.03 NHS number"]];
                                var adm = patientEHR["admissionsT"];
                                var disc = patientEHR["dischargesT"];
                                var one_hour=1000*60*60;  // in ms
                               
                                var index_a = adm.indexOf(self.data[i]["3.06 Date/time arrival at hospital"]);
                                if(index_a === 0)  // first admission for this patient
                                     self.data[i][metric] = 0;
                                else{
                                    // var thisDischarge = disc[index_a]; 
                                    // var d_date = self.stringToDate(thisDischarge);
                                    var a_date = self.stringToDate(adm[index_a]);  
                                    // look for discharges within 48 hours prior to this admission
                                    var found = 0; 
                                    for(var dt = 0; dt < disc.length; dt++){
                                        var d_date = self.stringToDate(disc[dt]);
                                        
                                         var adt = a_date.getTime(), 
                                             ddt = d_date.getTime();
                                        var diff = Math.round((adt - ddt)/one_hour);
                                        if(diff >= 0 && diff <=48){
                                            self.data[i][metric] = 1;
                                            found = 1; 
                                            break;
                                        }
                                    }
                                    if(found === 0)
                                        self.data[i][metric] = 0; 
                                 }
                               
                                }                   
                                
                            }
                            //for(var j=0; j < self.data.length; j++)
                                //    ////console.log(self.data[j][metric]);
                            return metric; 
                        },
                          


 applyAggregateRule: function(displayObj, displayId, data, redraw){
                            var self = this; 
                            var dict = {};
                            var metric = displayObj["metric"],
                                rule = displayObj["aggregate"],
                                scale = displayObj["scale"],
                                dateVar = displayObj["x"],
                                displayVar = displayObj["y"],
                                categoricals = displayObj["categories"];
                            
                            if(redraw)
                                categoricals = self.categoricals[displayId]; 
                            ////console.log(displayObj);
                            if(displayVar === "derived")
                                displayVar = self.calculateDerivedVar(metric, displayVar); 
                            //else if(displayVar.constructor == Array){}
                            
                            ////console.log(categoricals); 

                            if(!categoricals){
                                for(var i=0; i< data.length; i++){
                                    // get the month of this entry
                                    var date = self.stringToDate(data[i][dateVar]);                                                        
                                    var month = self.months[date.getMonth()];
                                    var year = date.getYear()+1900; 
                                    var my = month+"-"+year; 
                                    ////////console.log(my); 
                                    dict[my] = dict[my]? dict[my]+parseInt(data[i][displayVar]) : parseInt(data[i][displayVar]);
    
                                }
    
                                //////console.log(dict); 
                                var sum=0; 
                                for(var key in dict){
                                    sum += dict[key];
                                }
                            
    
                                // sort dict by date
                                function custom_sort(a,b){
                                    return new Date("01-"+a).getTime() - new Date("01-"+b).getTime(); 
                                }
    
                                var ordered = [];
                                var temp = Object.keys(dict);
                                ////////console.log(temp); 
                                var orderedKeys = Object.keys(dict).sort(custom_sort);
                                ////////console.log(orderedKeys);
    
                                for(var k= 0; k < orderedKeys.length; k++){
                                    var obj = {};
                                    obj['date'] = orderedKeys[k];
                                    obj['number'] = dict[orderedKeys[k]];
                                    ordered.push(obj); 
    
                                }
    
                                //////console.log(ordered); 
                                //self.control.drawChart(displayId, ordered); 
                                self.dataViews.push({"viewId": displayId,   
                                                    "data": ordered, 
                                                    "metric": self.availMetrics[displayId]['value'], 
                                                    "metricLabel": self.availMetrics[displayId]['text']});
                            }
                            else if(categoricals.length === 1){  // count within categories
                                var cat = categoricals[0];
                                

                                var levels = d3.map(self.data, function(item){
                                    return item[cat];
                                    }).keys();
                                
                                for(var i=0; i< data.length; i++){
                                                        // get the month of this entry
                                                        var date = self.stringToDate(data[i][dateVar]);
                                                        var month = self.months[date.getMonth()];
                                                        var year = date.getYear()+1900; 
                                                        var my = month+"-"+year; 
                                                        if(!dict[my]){
                                                            dict[my] = {};
                                                            levels.forEach(function(level){
                                                                dict[my][level] = 0;
                                                            });

                                                        }
                                                        var level = data[i][cat];
                                                        dict[my][level] += parseInt(data[i][displayVar]);                                                        
                                                    }
                                
                               if(redraw)    
                                    self.control.drawChart(displayId, dict, cat, levels);

                            }
                        else if(categoricals.length === 2){
                           
                            // new variable divides the trellis
                            var levels0 = d3.map(self.data, function(item){
                                    return item[categoricals[displayId][1]];
                                    }).keys();
                            
                            var levels1 = d3.map(self.data, function(item){
                                    return item[categoricals[displayId][0]];
                                    }).keys();
                            
                            levels0.forEach(function(level){
                                dict[level] = {};
                            });
                            //////console.log(dict);
                            for(var i=0; i< data.length; i++){
                                                        // get the month of this entry
                                                        var date = self.stringToDate(data[i][dateVar]);
                                                        ////////console.log(date); 
                                                        var month = self.months[date.getMonth()];
                                                        var year = date.getYear()+1900; 
                                                        //////////console.log(month);
                                                        //////////console.log(year);
                                                        var my = month+"-"+year; 
                                                        ////////console.log(my); 
                                                        if(!dict[levels0[0]][my]){
                                                            levels0.forEach(function(level){
                                                                dict[level][my] = {}; 
                                                                levels1.forEach(function(level2){
                                                                    dict[level][my][level2] = 0;
                                                                });

                                                            });
                                                         }
                                                       dict[data[i][categoricals[displayId][1]]][my][data[i][categoricals[displayId][0]]] += parseInt(data[i][displayVar]);

                                                    }
                               //////console.log(dict);
                               var levels = [levels0, levels1]; 
                            if(redraw)
                                self.control.drawChart(displayId, dict, categoricals[displayId], levels, 1);


                        }
                       
                    }






setupDrag: function(elmnt){
							var self = this;
							console.log(elmnt.id); 
							//$(elmnt.id).resizable(); 
							var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
							if (document.getElementById(elmnt.id + "Header")) {
							    /* if present, the header is where you move the DIV from:*/
							    document.getElementById(elmnt.id + "Header").onmousedown = dragMouseDown;
							  } else {
							    /* otherwise, move the DIV from anywhere inside the DIV:*/
							   // elmnt.onmousedown = dragMouseDown;
							  }
							function dragMouseDown(e) {
							    e = e || window.event;
							    // get the mouse cursor position at startup:
							    pos3 = e.clientX;
							    pos4 = e.clientY;
							    document.onmouseup = closeDragElement;
							    // call a function whenever the cursor moves:
							    document.onmousemove = elementDrag;
							  }

							 function elementDrag(e) {
							    e = e || window.event;
							    // calculate the new cursor position:
							    pos1 = pos3 - e.clientX;
							    pos2 = pos4 - e.clientY;
							    pos3 = e.clientX;
							    pos4 = e.clientY;
							    // set the element's new position:
							    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
							    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
							  }
							   function closeDragElement() {
								    /* stop moving when mouse button is released:*/
								    document.onmouseup = null;
								    document.onmousemove = null;
								  }
						}

// resize of single variable bar chart: 
function resize() {
							if(!self.cat)
							{	
							console.log("RESIZE CALLED 22 ");

							var svgw = parseInt(d3.select("#card"+viewId).style("width")) * 0.9,
								svgh = parseInt(d3.select("#card"+viewId).style("height")) * 0.9;

							// update svg width and height
							self.svg = d3.select("#mainsvg"+viewId); 

							self.svg.attr("width", svgw)
												.attr("height", svgh);


						 	// update the range of the scale with new width/ height
							var width = svgw - margin.right - margin.left, 
								height = svgh - margin.top - margin.bottom; 

							x.rangeRound([0, width]).padding(0.1);
							y.range([(height), 0]); 

							////console.log(self.svg.selectAll("*"));
							self.svg.select(".x.axis")
							.attr("transform", "translate("+ 0+"," + (height + margin.top ) + ")")
							      .call(d3.axisBottom(x))
									.selectAll("text")	
								        .style("text-anchor", "end")
								        .attr("dx", "-.8em")
								        .attr("dy", ".15em")
								        .attr("transform", "rotate(-65)");
							
							

							self.svg.select(".y.axis")
									.call(d3.axisLeft(y).ticks(5, "s"))
							      	.attr("transform", "translate(0,"+ margin.top+")");
							self.svg.selectAll(".bar")
								.attr("x", function(d) { 
									return x(d.date); })
							      .attr("y", function(d) { 
							      	return y(d.number)+ margin.top; })
							      .attr("width", x.bandwidth())
							      .attr("height", function(d) { return height  - y(d.number); })
							}
						}
						 
						$("#card"+viewId).resize(function(e){
							resize(); 
						});
						//d3.select("#card"+viewId).on("resize", resize); 
						//resize();


/////////////////////////////////////////////////////////////////////////
// resize for drawCatBar()
//////////////////////////
function resize() {
							//console.log("RESIZE CALLED");
							var svgw = parseInt(d3.select("#card"+viewId).style("width")) * 0.9,
								svgh = parseInt(d3.select("#card"+viewId).style("height")) * 0.9;

							// update svg width and height
							self.svg = d3.select("#mainsvg"+viewId+"_"+iter); 

							self.svg.attr("width", svgw)
												.attr("height", svgh);


						 	// update the range of the scale with new width/ height
							var width = svgw - margin.right - margin.left, 
								height = svgh - margin.top - margin.bottom; 

							x.rangeRound([0, width]).padding(0.1);
							y.range([height, 0]); 


							self.svg.select(".x.axis")
							.attr("transform", "translate("+ 0+"," + (height + margin.top ) + ")")
							      .call(d3.axisBottom(x))
									.selectAll("text")	
								        .style("text-anchor", "end")
								        .attr("dx", "-.8em")
								        .attr("dy", ".15em")
								        .attr("transform", "rotate(-65)");
							
							self.svg.select(".y.axis")
									.call(d3.axisLeft(y).ticks(5, "s"))
							      	.attr("transform", "translate(0,"+ margin.top+")");

							////console.log(self.svg.selectAll("g").selectAll(".bar"));
							/*self.svg.selectAll("g").selectAll(".bar")
								.attr("x", function(d, i) { return x(i); })
							      .attr("y", function(d) { 
							      	return y(d.number)+ margin.top; })
							      .attr("width", x.bandwidth())
							      .attr("height", function(d) { return height  - y(d.number); })*/
							     changed(); 

						}
						